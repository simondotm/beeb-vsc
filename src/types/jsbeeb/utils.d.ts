declare module 'jsbeeb/utils' {
	export let runningInNode: boolean;
	export function isFirefox(): boolean;
	export function parseAddr(addr: string): number;
	export const userKeymap: any[];
	export type BBCKeyMap = [number, number];
	export type BBCKey = 
    | 'SEMICOLON_PLUS'
    | 'MINUS'
    | 'LEFT_SQUARE_BRACKET'
    | 'RIGHT_SQUARE_BRACKET'
    | 'COMMA'
    | 'PERIOD'
    | 'SLASH'
    | 'SHIFTLOCK'
    | 'TAB'
    | 'RETURN'
    | 'DELETE'
    | 'COPY'
    | 'SHIFT'
    | 'ESCAPE'
    | 'CTRL'
    | 'CAPSLOCK'
    | 'LEFT'
    | 'UP'
    | 'RIGHT'
    | 'DOWN'
    | 'K0'
    | 'K1'
    | 'K2'
    | 'K3'
    | 'K4'
    | 'K5'
    | 'K6'
    | 'K7'
    | 'K8'
    | 'K9'
    | 'Q'
    | 'W'
    | 'E'
    | 'R'
    | 'T'
    | 'Y'
    | 'U'
    | 'I'
    | 'O'
    | 'P'
    | 'A'
    | 'S'
    | 'D'
    | 'F'
    | 'G'
    | 'H'
    | 'J'
    | 'K'
    | 'L'
    | 'Z'
    | 'X'
    | 'C'
    | 'V'
    | 'B'
    | 'N'
    | 'M'
    | 'F0'
    | 'F1'
    | 'F2'
    | 'F3'
    | 'F4'
    | 'F5'
    | 'F6'
    | 'F7'
    | 'F8'
    | 'F9'
    | 'SPACE'
    | 'UNDERSCORE_POUND'
    | 'AT'
    | 'COLON_STAR'
    | 'PIPE_BACKSLASH'
    | 'HAT_TILDE'
    | 'NUMPADPLUS'
    | 'NUMPADMINUS'
    | 'NUMPADSLASH'
    | 'NUMPADASTERISK'
    | 'NUMPAD7'
    | 'NUMPAD8'
    | 'NUMPAD9'
    | 'NUMPADHASH'
    | 'NUMPAD4'
    | 'NUMPAD5'
    | 'NUMPAD6'
    | 'NUMPAD_DELETE'
    | 'NUMPAD1'
    | 'NUMPAD2'
    | 'NUMPAD3'
    | 'NUMPADCOMMA'
    | 'NUMPAD0'
    | 'NUMPAD_DECIMAL_POINT'
    | 'NUMPADENTER';

	export const BBC: Record<BBCKey, BBCKeyMap>;
	export function stringToBBCKeys(s: string): BBCKey[];
	type KeyCode = 
			| 'UNDEFINED'
			| 'BACKSPACE'
			| 'TAB'
			| 'CLEAR'
			| 'ENTER'
			| 'SHIFT'
			| 'CTRL'
			| 'ALT'
			| 'BREAK'
			| 'CAPSLOCK'
			| 'ESCAPE'
			| 'SPACE'
			| 'PAGEUP'
			| 'PAGEDOWN'
			| 'END'
			| 'HOME'
			| 'LEFT'
			| 'UP'
			| 'RIGHT'
			| 'DOWN'
			| 'PRINTSCREEN'
			| 'INSERT'
			| 'DELETE'
			| 'K0'
			| 'K1'
			| 'K2'
			| 'K3'
			| 'K4'
			| 'K5'
			| 'K6'
			| 'K7'
			| 'K8'
			| 'K9'
			| 'A'
			| 'B'
			| 'C'
			| 'D'
			| 'E'
			| 'F'
			| 'G'
			| 'H'
			| 'I'
			| 'J'
			| 'K'
			| 'L'
			| 'M'
			| 'N'
			| 'O'
			| 'P'
			| 'Q'
			| 'R'
			| 'S'
			| 'T'
			| 'U'
			| 'V'
			| 'W'
			| 'X'
			| 'Y'
			| 'Z'
			| 'WINDOWS'
			| 'MENU'
			| 'NUMPAD0'
			| 'NUMPAD1'
			| 'NUMPAD2'
			| 'NUMPAD3'
			| 'NUMPAD4'
			| 'NUMPAD5'
			| 'NUMPAD6'
			| 'NUMPAD7'
			| 'NUMPAD8'
			| 'NUMPAD9'
			| 'NUMPADASTERISK'
			| 'NUMPADPLUS'
			| 'NUMPAD_DECIMAL_COMMA'
			| 'NUMPADMINUS'
			| 'NUMPAD_DECIMAL_POINT'
			| 'NUMPADSLASH'
			| 'F1'
			| 'F2'
			| 'F3'
			| 'F4'
			| 'F5'
			| 'F6'
			| 'F7'
			| 'F8'
			| 'F9'
			| 'F10'
			| 'F11'
			| 'F12'
			| 'NUMLOCK'
			| 'SCROLL_LOCK'
			| 'VOLUMEUP'
			| 'VOLUMEDOWN'
			| 'FASTFORWARD'
			| 'FASTREWIND'
			| 'PLAYPAUSE'
			| 'COMMA'
			| 'PERIOD'
			| 'SLASH'
			| 'LEFT_SQUARE_BRACKET'
			| 'BACKSLASH'
			| 'RIGHT_SQUARE_BRACKET'
			| 'NUMPADENTER'
			| 'SHIFT_LEFT'
			| 'SHIFT_RIGHT'
			| 'ALT_LEFT'
			| 'ALT_RIGHT'
			| 'CTRL_LEFT'
			| 'CTRL_RIGHT';
	export const keyCodes: Record<KeyCode, number>;
	export type KeyMap = Record<number, BBCKey>;
	export function getKeyMap(keyLayout: string): KeyMap;
	export function hexbyte(value: number): string;
	export function hexword(value: number): string;
	export function hd(reader: any, start: any, end: any, opts: any): any;
	export function signExtend(val: number): number;
	export function noop(): void;
	export function setBaseUrl(url: string): void;
	export function uint8ArrayToString(array: string | Uint8Array): string;
	export function stringToUint8Array(str: string): Uint8Array;
	export function loadData(url: string): Uint8Array; // maybe throws
	export function readInt32(data: Uint8Array, offset: number): number;
	export function readInt16(data: Uint8Array, offset: number): number;
	export function readFloat32(data: Uint8Array, offset: number): number;
	export function ungzip(data: Uint8Array): Uint8Array;
	export class DataStream {
		constructor(name_: string, data_: Uint8Array, dontUnzip_: boolean)
	}
	export function makeFast32(u32: Uint32Array): Int32Array;
	export function unzipDiscImage(data: Uint8Array): Uint8Array;
	export function unzipRomImage(data: Uint8Array): Uint8Array;
	export function discImageSize(name: string): number;
	export function setDiscName(data: Uint8Array, name: string): void;
	export function resizeUint8Array(array: Uint8Array, byteSize: number): Uint8Array;
	export class Fifo {
		constructor(capacity: number)
	}

}
